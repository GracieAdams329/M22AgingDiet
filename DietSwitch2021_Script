#Combined the fastq files for each barcode as usual, then renamed them sample names for ease and trimmed barcodes using Dorado (see: https://github.com/GracieAdams329/ONT-RNASeq-Pipeline/blob/main/Step1-combine-trim-fastq)
#Then run:
SCRIPT NAME: MinimapStringtieSalmonScript_DS2021.sh
-------
#!/bin/bash
# Request 8 gigabytes of real memory (RAM) 2 cores *4G = 8
#SBATCH --mem=8G
# Request 2 cores
#SBATCH --cpus-per-task=2
# Email notifications
#SBATCH --mail-user=gadams3@sheffield.ac.uk
# Email notifications
#SBATCH --mail-type=ALL
# Change job output log file name (default is slurmJOBID)
#SBATCH --output=output.MinimapStringtieSalmonDS2021_021224.out
# Request more time (default is 8 hours)
#SBATCH --time=24:00:00

#Activate the repository
#echo -e "if [[ -e '/usr/local/extras/Genomics' ]];\nthen\n\tsource /usr/local/extras/Genomics/.bashrc\nfi" >> $HOME/.bash_profile
source /usr/local/extras/Genomics/.bashrc

# Set the OPENMP_NUM_THREADS environment variable to 4
# This is needed to ensure efficient core usage.
export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK

SampleArray=$(cat /fastdata/bop23ga/DietSwitch2_8_2021/samplelist.txt)

for g in ${SampleArray[@]}
do
#Aligment to genome using minimap2
minimap2 -ax splice /shared/simons_lab1/Shared/nanopore_output/Genomes_and_Transcriptomes/Drosophila_melanogaster.BDGP6.32.dna.toplevel.fa /fastdata/bop23ga/DietSwitch2_8_2021/fastq_TOUSE/${g}_merge_trimmed.fastq | samtools view -Sb > /fastdata/bop23ga/DietSwitch2_8_2021/MinimapOut/${g}.bam
samtools sort -@ 2 -m 4G -o /fastdata/bop23ga/DietSwitch2_8_2021/MinimapOut/${g}_sorted.bam /fastdata/bop23ga/DietSwitch2_8_2021/MinimapOut/${g}.bam
done

for g in ${SampleArray[@]}
do
#StringTie to assemble transcripts into a transcriptome according to the gene info from the genome
stringtie -p 2 -B -L -e -G /shared/simons_lab1/Shared/nanopore_output/Genomes_and_Transcriptomes/Drosophila_melanogaster.BDGP6.32.103.gtf -o /fastdata/bop23ga/DietSwitch2_8_2021/Stringtie_e_option/${g}/${g}_stringtie.gtf /fastdata/bop23ga/DietSwitch2_8_2021/MinimapOut/${g}_sorted.bam
done

for g in ${SampleArray[@]}
do
#Aligment to transcriptome using minimap2 for salmon
minimap2 -ax splice /shared/simons_lab1/Shared/nanopore_output/Genomes_and_Transcriptomes/Drosophila_melanogaster.BDGP6.32.cdna.all.fa /fastdata/bop23ga/DietSwitch2_8_2021/fastq_TOUSE/${g}_merge_trimmed.fastq | samtools view -Sb > /fastdata/bop23ga/DietSwitch2_8_2021/MinimapCDNAOut/${g}.bam
done

source /usr/local/community/Genomics/apps/miniconda/etc/profile.d/conda.sh
conda activate /usr/local/community/Genomics/apps/mambaforge/envs/salmon

for g in ${SampleArray[@]}
do
#Get read counts with salmon
salmon quant --ont -t /shared/simons_lab1/Shared/nanopore_output/Genomes_and_Transcriptomes/Drosophila_melanogaster.BDGP6.32.cdna.all.fa -l U -a /fastdata/bop23ga/DietSwitch2_8_2021/MinimapCDNAOut/${g}.bam -o /fastdata/bop23ga/DietSwitch2_8_2021/SalmonOut/${g}_salmonout/
done
-------

#The .ctab file made by StringTie to be used with the Ballgown R package use FPKM, whereas we want TPM (https://www.rna-seqblog.com/rpkm-fpkm-and-tpm-clearly-explained/) which is in the .gtf file.

cd /fastdata/bop23ga/DietSwitch2_8_2021/
barclist=$(cat samplelist.txt)

#Note that for the below code, if copied and pasted as a block it throws an error - make sure to type/copy and paste the individual lines!
for g in ${barclist[@]}
do
cd Sringtie_e_option/${g}
grep -P "\ttranscript\t" ${g}_stringtie.gtf | cut -f9 | grep -P "FBtr" | awk '{gsub("\"","",$0);gsub(";","",$0);print $4,$11,$12}' > ../TPMFiles/${g}_TPM.txt
cd /fastdata/bop23ga/DietSwitch2_8_2021/
done

#Copy across to shared drive:
- merged and trmmed fastq
- minimap outs
- salmon outs

R SCRIPT
-------
rm(list=ls())

library(ggplot2)
library(PerformanceAnalytics)
library(dplyr)







##-------Checking method works for comparing one sample
#Read in TPM from Salmon and StringTie
setwd('Z:/simons_lab1/Shared/nanopore_output/DietSwitch2_8_2021/')

salmon <- read.table('SalmonOut/Sample001_salmonout/quant.sf', header = TRUE)
salmon <- salmon[ -c(2, 3, 5)]
colnames(salmon)[colnames(salmon) == "TPM"] <- "SalmonTPM"

stringtie <- read.table('Stringtie_e_option/TPMFiles/Sample001_TPM.txt', fill = TRUE)
stringtie <- stringtie[ -2]
colnames(stringtie)[colnames(stringtie) == "V1"] <- "Name"
colnames(stringtie)[colnames(stringtie) == "V3"] <- "StringtieTPM"

TPM <- merge(salmon, stringtie, by = "Name")

#Explore the data
ggplot(TPM, aes(x = SalmonTPM, y = StringtieTPM)) +
  geom_point()

TPM$Salmon_over_Stringtie = TPM$SalmonTPM/TPM$StringtieTPM
ggplot(TPM, aes(x = Name, y = Salmon_over_Stringtie)) +
  geom_point()

TPM$logSalmonTPM = log10(TPM$SalmonTPM)
TPM$logStringtieTPM = log10(TPM$StringtieTPM)
ggplot(TPM, aes(x = logSalmonTPM, y = logStringtieTPM)) +
  geom_point()

TPM$logSalmon_over_logStringtie = TPM$logSalmonTPM/TPM$logStringtieTPM
ggplot(TPM, aes(x = Name, y = logSalmon_over_logStringtie)) +
  geom_point()

#Correlation plots
chart.Correlation(TPM[,2:3], histogram=TRUE)







##-------Loop to read in all samples and make a large dataframe for correlation plots
setwd('Z:/simons_lab1/Shared/nanopore_output/DietSwitch2_8_2021/')
samplelist <- read.table("samplelist_69.txt")
samplelist = samplelist$V1

#Make transcripts variable to store all transcripts in all samples
transcripts <- character()

for(i in 1:length(samplelist))
{
  currentsample = samplelist[i]
  
  salmon <- read.table(paste('SalmonOut/', currentsample, '_salmonout/quant.sf', sep = ''), header = TRUE, fill = TRUE)
  salmon <- salmon[ -c(2, 3, 5)]
  colnames(salmon)[colnames(salmon) == "TPM"] <- "SalmonTPM"
  
  stringtie <- read.table(paste('Stringtie_e_option/TPMFiles/', currentsample, '_TPM.txt', sep = ''), fill = TRUE)
  stringtie <- stringtie[ -2]
  colnames(stringtie)[colnames(stringtie) == "V1"] <- "Name"
  colnames(stringtie)[colnames(stringtie) == "V3"] <- "StringtieTPM"
  
  TPM <- merge(salmon, stringtie, by = "Name")
  
  #Fetch the transcripts from this sample's TPM dataframe
  transcripts <- append(transcripts, TPM$Name)
}

#Fetch unique transcripts out and make dataframe for merging
overallTPM <- as.data.frame(unique(transcripts))
colnames(overallTPM)[colnames(overallTPM) == "unique(transcripts)"] <- "Name"

stdups <- character()

#Run loop to merge log(SalmonTPM/StringtieTPM) for all samples
for(i in 1:length(samplelist))
{
  currentsample = samplelist[i]
  
  salmon <- read.table(paste('SalmonOut/', currentsample, '_salmonout/quant.sf', sep = ''), header = TRUE, fill = TRUE)
  salmon <- salmon[ -c(2, 3, 5)]
  colnames(salmon)[colnames(salmon) == "TPM"] <- "SalmonTPM"
  
  stringtie <- read.table(paste('Stringtie_e_option/TPMFiles/', currentsample, '_TPM.txt', sep = ''), fill = TRUE)
  stringtie <- stringtie[ -2]
  colnames(stringtie)[colnames(stringtie) == "V1"] <- "Name"
  colnames(stringtie)[colnames(stringtie) == "V3"] <- "StringtieTPM"
  
  stdups <- append(stdups, length(which(duplicated(stringtie$Name))))
  
  TPM <- merge(salmon, stringtie, by = "Name")
  colnames(TPM)[colnames(TPM) == "SalmonTPM"] <- paste("SalmonTPM_", currentsample, sep = "")
  colnames(TPM)[colnames(TPM) == "StringtieTPM"] <- paste("StringtieTPM_", currentsample, sep = "")

  overallTPM <- left_join(overallTPM, TPM, by = "Name", keep = FALSE, multiple = "first")
  #Just takes the first value for the duplicated transcripts - must be an error in StringTie but it's in so few transcripts we can ignore for now.
}

stdups
#To check how many duplications there were - should be very few.







##-------Create correlation table
corrtable <- cor(overallTPM, use = "complete.obs")
corrplot(corrtable[1:45,1:45], method = "number")
